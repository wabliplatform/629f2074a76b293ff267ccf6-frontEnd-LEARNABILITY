/**
 * TempApi
 * This is a sample openApi document
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: lampralexandros@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Course from '../model/Course';

/**
* Course service.
* @module api/CourseApi
* @version 1.0.0
*/
export default class CourseApi {

    /**
    * Constructs a new CourseApi. 
    * @alias module:api/CourseApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createcourse operation.
     * @callback module:api/CourseApi~createcourseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Course} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates the data
     * @param {module:model/Course} course data to be created
     * @param {module:api/CourseApi~createcourseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Course}
     */
    createcourse(course, callback) {
      let postBody = course;
      // verify the required parameter 'course' is set
      if (course === undefined || course === null) {
        throw new Error("Missing the required parameter 'course' when calling createcourse");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Course;
      return this.apiClient.callApi(
        '/course', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletecourse operation.
     * @callback module:api/CourseApi~deletecourseCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the element
     * @param {String} courseId the Id parameter
     * @param {module:api/CourseApi~deletecourseCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletecourse(courseId, callback) {
      let postBody = null;
      // verify the required parameter 'courseId' is set
      if (courseId === undefined || courseId === null) {
        throw new Error("Missing the required parameter 'courseId' when calling deletecourse");
      }

      let pathParams = {
        'courseId': courseId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/course/{courseId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllcourse operation.
     * @callback module:api/CourseApi~getAllcourseCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Course>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data
     * @param {module:api/CourseApi~getAllcourseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Course>}
     */
    getAllcourse(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Course];
      return this.apiClient.callApi(
        '/course/getAll', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getcourse operation.
     * @callback module:api/CourseApi~getcourseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Course} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the element
     * @param {String} courseId the Id parameter
     * @param {module:api/CourseApi~getcourseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Course}
     */
    getcourse(courseId, callback) {
      let postBody = null;
      // verify the required parameter 'courseId' is set
      if (courseId === undefined || courseId === null) {
        throw new Error("Missing the required parameter 'courseId' when calling getcourse");
      }

      let pathParams = {
        'courseId': courseId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Course;
      return this.apiClient.callApi(
        '/course/{courseId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatecourse operation.
     * @callback module:api/CourseApi~updatecourseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Course} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the element
     * @param {String} courseId the Id parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/Course} opts.course data to be updated
     * @param {module:api/CourseApi~updatecourseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Course}
     */
    updatecourse(courseId, opts, callback) {
      opts = opts || {};
      let postBody = opts['course'];
      // verify the required parameter 'courseId' is set
      if (courseId === undefined || courseId === null) {
        throw new Error("Missing the required parameter 'courseId' when calling updatecourse");
      }

      let pathParams = {
        'courseId': courseId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Course;
      return this.apiClient.callApi(
        '/course/{courseId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
